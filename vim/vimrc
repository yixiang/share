" ======================================================================
" my settings in .vimrc or _vimrc

if has('gui_running')
	set lines=40 columns=124
    if has('mac')
        set guifont=Monaco:h14
    endif
endif

" tie clipboard and the default register together
set clipboard=unnamed

" Copy paste (word copy and word replacement)
map ,a  :%y<CR>
map ,y  vmziwy`z
map ,p  vmziw"0p`z
vmap ,p  "0p
map ,0  "0p

" if has('unix') " command line version of vim on mac doesn't expose 'mac'
"     " On OSX
"     map ,y :call system("pbcopy", getreg("\""))<CR>
"     map ,p :call setreg("1",system("pbpaste"))<CR>"1p
"     map ,P :call setreg("1",system("pbpaste"))<CR>"1P
"     set spellfile=~/.vimspell.utf-8.add
" elseif has('win32')
"    map ,y "+y
"    map ,p "+p
"    map ,P "+P
" else
"    " On ubuntu (running Vim in gnome-terminal)
"    " The reason for the double-command on <C-c> is due to some weirdness with
"    " the X clipboard system.
"    map ,y :call system("xclip -i -selection clipboard", getreg("\""))<CR>
"    map ,p :call setreg("1",system("xclip -o -selection clipboard"))<CR>"1p
"    map ,P :call setreg("1",system("xclip -o -selection clipboard"))<CR>"1P
" end

" paste from yank register
map ,0 "0p
" paste delete register
map ,1 "1p

" set backupdir
if has('win32')
    set backupdir=c:/tmp,~/tmp,.
else
    set backupdir=/tmp,~/tmp,.
endif

set scrolloff=5

set nocompatible
source $VIMRUNTIME/vimrc_example.vim
set number
set numberwidth=5 " 4 digits plus a space
set encoding=utf-8
set autoindent
set autoread
set autowrite
set showmatch
syntax on
set foldmethod=marker
let g:xml_syntax_folding=1
"set foldmethod=syntax "add this line to syntax\xml.vim

set shiftwidth=4
set tabstop=4

set hidden

set incsearch
set hlsearch

set novb
set expandtab

" ========= extension to filetype =========
filetype on
au BufNewFile,BufRead *.go set syntax=go
au BufNewFile,BufRead *.m set syntax=objc

" =========== customizing syntax ==========
au Syntax html   set sw=2 | set ts=2 | set noet
au Syntax python set sw=2 | set ts=4 | set et
au Syntax objc   set sw=2 | set ts=4 | set et
au Syntax c   set sw=2 | set ts=4 | set et
au Syntax cpp   set sw=2 | set ts=4 | set et
au Syntax java   set sw=2 | set ts=4 | set et
au Syntax markdown set sw=2 | set ts=4 | set et

" =========== customizing file extension handling ==========
au BufNewFile,BufRead *.molib setf moscript
au BufNewFile,BufRead *.moml setf moscript
au BufNewFile,BufRead *.j setf objj
au BufNewFile,BufRead *.json setf javascript
au BufNewFile,BufRead *.thrift setf thrift
"au BufNewFile,BufRead *.md setf markdown
"au BufNewFile,BufRead *.md set sw=2 | set ts=4 | set et
"au BufNewFile,BufRead *.md setf mkd

" ============ commands re-map ============

" window commands
" splitting
map ,ws :wincmd s<CR>
map ,wv :wincmd v<CR>
map ,wT :wincmd T<CR>
" closing
map ,wc :wincmd c<CR>
map ,wq :wincmd q<CR>
map ,wo :wincmd o<CR>
" moving cursor
map ,ww :wincmd w<CR>
map ,wh :wincmd h<CR>
map ,wj :wincmd j<CR>
map ,wk :wincmd k<CR>
map ,wl :wincmd l<CR>
map ,wH :wincmd H<CR>
map ,wJ :wincmd J<CR>
map ,wK :wincmd K<CR>
map ,wL :wincmd L<CR>
map ,wp :wincmd p<CR>
map ,wP :wincmd P<CR>
map ,wt :wincmd t<CR>
map ,wb :wincmd b<CR>
" moving window
map ,wr :wincmd r<CR>
map ,wR :wincmd R<CR>
map ,wx :wincmd x<CR>
" resizing window
map ,w- :wincmd -<CR>
map ,w+ :wincmd +<CR>
map ,w< :wincmd <<CR>
map ,w> :wincmd ><CR>
map ,w= :wincmd =<CR>

" gtags
"map ,gg :Gtags<CR><CR>
"map ,gs :Gtags -s<CR><CR>
"map ,gr :Gtags -r<CR><CR>
"map ,gn :cn<CR><CR>
"map ,gp :cp<CR><CR>

" git
map ,gc  :up\|!gitc<CR>
map ,gp  :up\|!gitcp<CR>
map ,gs  :up\|!gits<CR>
map ,gd  :up\|!gitd<CR>
map ,gu  :up\|!gitu<CR>

" save and quit
map ,WQ :wq!<CR>
map ,Q :q!<CR>
map ,q :q<CR>

" auto completion
imap ,n <C-n>
inoremap <expr> j pumvisible() ? "\<DOWN>" : "j"
inoremap <expr> k pumvisible() ? "\<UP>" : "k"
inoremap <expr> h pumvisible() ? "\<CR>" : "h"
inoremap <expr> l pumvisible() ? "\<CR>" : "l"

" map ,d in any mode other than normal
map! ,, <ESC>:update<CR>
map! ,e <ESC>
" but in normal mode the above
nnoremap ,, :update<CR>
nnoremap ,e <ESC>

" insert line and exit inesrt mode
map ,o o<ESC>
map ,O O<ESC>

" spell check
map ,sp :setlocal spell spelllang=en_us<CR>
map ,sc :setlocal spell spelllang=<CR>
map ,ss z=1<CR><CR>

" buffer switching
map ,b1 :buffer 1<CR>
map ,b2 :buffer 2<CR>
map ,b3 :buffer 3<CR>
map ,b4 :buffer 4<CR>
map ,b5 :buffer 5<CR>
map ,b6 :buffer 6<CR>
map ,b7 :buffer 7<CR>
map ,b8 :buffer 8<CR>
map ,b9 :buffer 9<CR>
map ,b0 :buffer 10<CR>
map ,bn :bn<CR>
map ,bp :bp<CR>
map ,bd :bd<CR>
map ,bu :buffers<CR>
map ,b  :bp<CR>
map ,bb :bn<CR>

" disable some settings
map ,nh :nohl<CR>

" save and make, make tool for windows must be setup
" (e.g. create make.bat and redirect to nmake.exe)
if has("win32")
    map ,nm :up\|!nmake<CR>
    map ,nb :up\|!nmake build<CR>
    map ,nr :up\|!nmake run<CR>
    map ,nc :up\|!nmake clean<CR>
    map ,nt :up\|!nmake test<CR>
endif
map ,m :up\|make<CR>
map ,mm :up\|make<CR>
map ,mb :up\|make build<CR>
map ,mr :up\|make run<CR>
map ,mi :up\|make install<CR>
map ,mc :up\|make clean<CR>
map ,mf :up\|make FILE_%<CR>
map ,mt :up\|make test<CR>


" customized run command
if has("win32")
    map ,ro :up\|!start %<CR>
else
    map ,ro :up\|!open %<CR>
endif
map ,r  :up\|!./%<CR>
map ,rr :up\|!./%<CR>
map ,rb :up\|!bash %<CR>
map ,ru :up\|!ruby %<CR>
map ,rh :up\|!php %<CR>
map ,rp :up\|!python %<CR>
map ,ry :up\|!python %<CR>
map ,rc :up\|!cc % ; ./a.out<CR>
map ,r+ :up\|!c++ % ; ./a.out<CR>
map ,rj :up\|!javac % ; java `basename -s .java %`<CR>
map ,r# :up\|!mcs % ; mono `basename -s .cs %`.exe<CR>

" " file encoding
" " utf-8 doesn't need BOM because it's the default encoding
" map ,ee :set fileencoding=utf-8\|set nobomb \|up<CR>
" map ,e8 :set fileencoding=utf-8\|set nobomb \|up<CR>
" map ,eu :set fileencoding=utf-16le\|set bomb \|up<CR>

" file format (line ending)
" fix mixture of line endings by removing \r
map ,ll :%s/\r//g<CR>
" set to unix format
map ,lu :set ff=unix \|up<CR>
" set to dos format
map ,ld :set ff=dos \|up<CR>

" quick syntax
map ,fd :setf markdown<CR>
map ,fm :setf moscript<CR>
map ,fj :setf java<CR>
map ,fk :setf mkd<CR>

" =======================================================
" comment.vim, version 1.0
" jerome.plut at normalesup dot org

function! CommentStyle(s)
	if match (a:s, '@') >= 0
		let str1 = substitute (a:s, '@.*$', '', '')
		let str2 = substitute (a:s, '^.*@', '', '')
	else
		let str1 = a:s. ' '
		let str2 = ''
	endif
	let pat1 = substitute (str1, '[][*^.$~]', '\\&', 'g')
	let pat1 = substitute (pat1, '\s*$', ' \\?', '')
	let str1 = substitute (str1, '&', '\\&', 'g')
	if str2 == ''
		" s:l1 contains the computed patterns to comment, s:l2 those to
		" uncomment
		let s:l1 = [ 'sm@^@'.str1.'@e' ]
		let s:l2 = [ 'sm@^\s*'.pat1.'@@e' ]
	else
		let pat2 = substitute (str2, '[][*^.$~]', '\\&', 'g')
		let pat2 = substitute (pat2, '^\s*', '\\s*', '')
		let str2 = substitute (str2, '&', '\\&', 'g')
		" protect any comment that becomes nested
		" with non-ASCII chars, to avoid collisions
		let s:l1 = ['sm@¬´¬§@¬´¬§¬§@ge', 'sm@'.pat1.'@¬´¬§¬´@ge', 'sm@^@'.str1.'@e']
		let s:l1+= ['sm@¬§¬ª@¬§¬§¬ª@ge', 'sm@'.pat2.'@¬ª¬§¬ª@ge', 'sm@$@'.str2.'@e']
		let s:l2 = ['sm@^\s*'.pat1.'@@e', 'sm@¬´¬§¬´@'.str1.'@ge', 'sm@¬´¬§¬§@¬´¬§@ge']
		let s:l2+= ['sm@'.pat2.'\s*$@@e', 'sm@¬ª¬§¬ª@'.str2.'@ge', 'sm@¬§¬§¬ª@¬§¬ª@ge']
	endif
endfunction

function! Comment() range
	for s in s:l1
		execute ':sil '.a:firstline.','.a:lastline.s
	endfor
endfunction

function! UnComment() range
	let pre = ':sil '.a:firstline.','.a:lastline
	for s in s:l2
		execute ':sil '.a:firstline.','.a:lastline.s
	endfor
endfunction

command! -nargs=1 CommentStyle call CommentStyle (<f-args>)

map <silent> ,c :call Comment()<CR>
map <silent> ,v :call UnComment()<CR>
" map =c :CommentStyle<Space>

CommentStyle #
au FileType * CommentStyle #
au FileType c,cpp,cs,java,objc,objcpp,go,d,moscript,javascript,xkb CommentStyle //
au FileType html,xml CommentStyle <!-- @ -->
au FileType strings,css,sql CommentStyle /* @ */
au FileType vim CommentStyle "
au FileType tex,mf,mytex,lilypond,postscr CommentStyle %
au FileType groff,nroff CommentStyle .\\"
au FileType config CommentStyle dnl
au FileType lua CommentStyle --
au FileType xdefaults CommentStyle !
au FileType mail CommentStyle >
au FileType bat CommentStyle REM
" au FileType python CommentStyle """ @ """

" wrapping comments
" map ,/ :s/^\(.*\)$/\/\* \1 \*\//<CR>:noh<CR>
" map ,\ :s/^\/\* \(.*\) \*\/$/\1/<CR>:noh<CR>
" map ,< :s/^\(.*\)$/<!-- \1 -->/<CR>:noh<CR>
" map ,> :s/^<!-- \(.*\) -->$/\1/<CR>:noh<CR>
" map ,( :s/^\(.*\)$/\(\* \1 \*\)/<CR>:noh<CR>
" map ,) :s/^(\* \(.*\) \*)$/\1/<CR>:noh<CR>

" Quick File https://github.com/zhchang/quick_file
map ,<SPACE> :QF<SPACE>

execute pathogen#infect()

function! SwitchSourceOrHeader()
  "update!
  if (expand ("%:e") == "cc")
    find %:t:r.h
  else
    find %:t:r.cc
  endif
endfunction

nmap ,n :call SwitchSourceOrHeader()<CR>

" Search currently selected text.
vnoremap ,/ y/<C-R>"<CR>

